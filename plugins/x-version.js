const axios = require('axios');
const config = require('../settings');
const { malvin } = require('../malvin');
const moment = require('moment-timezone');

malvin({
    pattern: 'version',
    react: 'üöÄ',
    desc: 'check bot version & updates üì¶',
    category: 'info',
    use: '.version',
    filename: __filename
}, async (malvin, mek, m, { from, sender, reply }) => {
    try {
        await malvin.sendMessage(from, { react: { text: '‚è≥', key: m.key } });

        const time = moment().tz('Africa/dar es salaam').format('HH:mm:ss');
        const date = moment().tz('Africa/dar es salaam').format('DD/MM/YYYY');
        const localPackage = require('../package.json');
        const currentVersion = localPackage.version;

        let latestVersion = 'Unknown';
        let status = 'üîç *Remote check disabled*';

        // Check if remote version checking is enabled (optional config toggle)
        if (config.CHECK_VERSION !== false) {
            const repoUrl = config.REPO || 'https://github.com/novaxmd/NOVA-XMD';
            const repoPath = repoUrl.replace('https://github.com/', '');
            const rawUrl = `https://raw.githubusercontent.com/${repoPath}/master/package.json`;

            const { data: remotePackage } = await axios.get(rawUrl, { timeout: 15000 });
            latestVersion = remotePackage.version || 'Unknown';
            status = currentVersion === latestVersion
                ? '‚úÖ *up-to-date*'
                : '‚ö†Ô∏è *update available*';
        }

        const caption = `
‚ï≠‚îÄ‚îÄ‚îÄ[ * ô·¥è·¥õ ·¥†·¥á Äs…™·¥è…¥* ]‚îÄ‚îÄ‚îÄ
‚îú *·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ*: v${currentVersion} üìç
‚îú * ü·¥Ä·¥õ·¥ás·¥õ*: v${latestVersion} üÜï
‚îú *s·¥õ·¥Ä·¥õ·¥ús*: ${status}
‚îú *·¥Ñ ú·¥á·¥Ñ·¥ã·¥á·¥Ö*: ${date} üóìÔ∏è
‚îú *·¥õ…™·¥ç·¥á*: ${time} üïí
‚îú * ô·¥è·¥õ*: ${config.BOT_NAME || 'NOVA-XMD'} ü§ñ
‚îú *·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä*: ${config.DEV_NAME || 'Nova-Xmd'} 
‚îú * Ä·¥á·¥ò·¥è*: ${config.REPO || 'https://github.com/novaxmd/NOVA-XMD '} üì¶
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
> *·¥ç·¥Ä·¥Ö·¥á  ô è Nova-Xmd*`;

        await malvin.sendMessage(from, {
            image: { url: config.ALIVE_IMG || 'https://github.com/novaxmd/BMB-XMD-DATA/raw/refs/heads/main/nova%20tech.jpg' },
            caption,
            contextInfo: {
                mentionedJid: [sender],
                forwardingScore: 999,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                    newsletterJid: '120363382023564830@newsletter',
                    newsletterName: config.BOT_NAME ? `${config.BOT_NAME} Bot` : 'ùôΩùôæùöÖùô∞-ùöáùôºùô≥',
                    serverMessageId: 143
                }
            }
        }, { quoted: mek });

        await malvin.sendMessage(from, { react: { text: '‚úÖ', key: m.key } });

    } catch (error) {
        console.error('‚ùå version check error:', error);

        const localVersion = require('../package.json').version;
        const caption = `
‚ï≠‚îÄ‚îÄ‚îÄ[ *·¥†·¥á Äs…™·¥è…¥ ·¥á Ä Ä·¥è Ä* ]‚îÄ‚îÄ‚îÄ
‚îú * ü·¥è·¥Ñ·¥Ä ü ·¥†·¥á Äs…™·¥è…¥*: v${localVersion} üìç
‚îú *·¥á Ä Ä·¥è Ä*: ${error.message || 'unknown error'} ‚ùå
‚îú * Ä·¥á·¥ò·¥è*: ${config.REPO || 'not configured'} üì¶
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
> *·¥ç·¥Ä·¥Ö·¥á  ô è Nova-Xmd*`;

        await reply(caption);
        await malvin.sendMessage(from, { react: { text: '‚ùå', key: m.key } });
    }
});
